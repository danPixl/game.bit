{"version":3,"sources":["game/game-base.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,kCAA6C;AAI7C;IAOE,kBAAY,OAAsB,EAAE,MAAyB;QAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,aAAK,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,KAAK,EAAE,CAAA;IACd,CAAC;IACD,wBAAK,GAAL;QACE,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;QAClB,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAA;QACnB,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAA;IACpB,CAAC;IAEK,wBAAK,GAAX;;gBAIU,MAAM;;;;wBAHd,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;;;6BACnB,CAAC,IAAI,CAAC,SAAS;wBACpB,qBAAM,IAAI,CAAC,IAAI,EAAE,EAAA;;wBAAjB,SAAiB,CAAC;iCACH,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;wBACrC,EAAE,CAAC,CAAC,MAAM,KAAK,kBAAU,CAAC,KAAK,CAAC,CAAC,CAAC;4BAChC,OAAO,CAAC,GAAG,CAAC,8BAA8B,EAAE,MAAM,CAAC,CAAA;4BACnD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAA;4BACrB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;4BAC1B,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,CAAA;4BAC3B,MAAM,kBAAD;wBACP,CAAC;;;;;;KAEJ;IACK,uBAAI,GAAV;;gBAIQ,aAAa,EACf,eAAe;;;;wBAJnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC;4BACxB,MAAM,gBAAA;wBACR,CAAC;wCACqB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,eAAe,CAAC;0CAClC,KAAK;;;6BACpB,CAAC,eAAe;wBACN,qBAAM,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EAAA;;iCAAzC,SAAyC;wBACxD,IAAI,CAAC,aAAa,GAAG,KAAK,CAAA;wBACR,qBAAM,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,aAAa,EAAE,MAAM,CAAC,EAAA;;wBAA3E,eAAe,GAAG,SAAyD,CAAA;wBAC3E,IAAI,CAAC,aAAa,GAAG,IAAI,CAAA;wBACzB,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;4BACrB,OAAO,CAAC,GAAG,CAAC,8BAA8B,CAAC,CAAA;wBAC7C,CAAC;wBAAC,IAAI,CAAC,CAAC;4BACN,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAA;wBACxB,CAAC;;;wBAEH,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,EAAE,CAAA;;;;;KAC5C;IACD,4BAAS,GAAT,UAAU,MAAc;IAExB,CAAC;IAEO,gCAAa,GAArB;QACE,MAAM,CAAC,CAAC,IAAI,CAAC,eAAe,KAAK,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC;IACH,eAAC;AAAD,CA7DA,AA6DC,IAAA;AA7DqB,4BAAQ","file":"game-base.js","sourcesContent":["import { Board, BoardPiece } from '../board';\r\nimport { Player } from '../player';\r\nimport { Utils } from '../utils';\r\n\r\nexport abstract class GameBase {\r\n  board: Board;\r\n  players: Array<Player>;\r\n  currentPlayerId: number;\r\n  isMoveAllowed: boolean;\r\n  isGameWon: boolean;\r\n\r\n  constructor(players: Array<Player>, canvas: HTMLCanvasElement) {\r\n    this.board = new Board(canvas);\r\n    this.players = players;\r\n    this.currentPlayerId = 0;\r\n    this.reset()\r\n  }\r\n  reset() {\r\n    this.isMoveAllowed = false;\r\n    this.isGameWon = false;\r\n    this.board.reset()\r\n    this.board.render()\r\n    this.board.debug()\r\n  }\r\n\r\n  async start() {\r\n    this.isMoveAllowed = true;\r\n    while (!this.isGameWon) {\r\n      await this.move();\r\n      const winner = this.board.getWinner();\r\n      if (winner !== BoardPiece.EMPTY) {\r\n        console.log('Game over: winner is player ', winner)\r\n        this.isGameWon = true\r\n        this.isMoveAllowed = false\r\n        this.board.announceWinner()\r\n        break\r\n      }\r\n    }\r\n  }\r\n  async move() {\r\n    if (!this.isMoveAllowed) {\r\n      return\r\n    }\r\n    const currentPlayer = this.players[this.currentPlayerId]\r\n    let actionSuccesful = false\r\n    while (!actionSuccesful) {\r\n      const action = await currentPlayer.getAction(this.board)\r\n      this.isMoveAllowed = false\r\n      actionSuccesful = await this.board.applyPlayerAction(currentPlayer, action)\r\n      this.isMoveAllowed = true\r\n      if (!actionSuccesful) {\r\n        console.log('Move not allowed! Try again.')\r\n      } else {\r\n        this.afterMove(action)\r\n      }\r\n    }\r\n    this.currentPlayerId = this.getNextPlayer()\r\n  }\r\n  afterMove(action: number) {\r\n    // no-op\r\n  }\r\n\r\n  private getNextPlayer() {\r\n    return (this.currentPlayerId === 0) ? 1 : 0;\r\n  }\r\n}"]}