{"version":3,"sources":["player/player-ai.ts"],"names":[],"mappings":"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","file":"player-ai.js","sourcesContent":["import { Player } from './player';\r\nimport { Board, BoardPiece } from '../board';\r\nimport { Utils } from '../utils';\r\n\r\nexport class PlayerAi extends Player {\r\n  static readonly MAX_DEPTH = 4\r\n  private ownBoardPieceValue: number;\r\n  private enemyBoardPiece: BoardPiece;\r\n  constructor(boardPiece: BoardPiece, canvas: HTMLCanvasElement) {\r\n    super(boardPiece, canvas)\r\n    this.ownBoardPieceValue = this.getBoardPieceValue(boardPiece)\r\n    this.enemyBoardPiece = (boardPiece === BoardPiece.PLAYER_1) ? BoardPiece.PLAYER_2 : BoardPiece.PLAYER_1;\r\n  }\r\n  private getBoardPieceValue(boardPiece: BoardPiece): number {\r\n    return (boardPiece === BoardPiece.EMPTY)\r\n      ? 0\r\n      : boardPiece === this.boardPiece\r\n        ? 1\r\n        : -1\r\n  }\r\n  private getStateValue(state: Array<Array<number>>): { winnerBoardPiece: BoardPiece, chain: number } {\r\n    let winnerBoardPiece = BoardPiece.EMPTY;\r\n    let chainValue = 0;\r\n    for (let i = 0; i < Board.ROWS; i++) {\r\n      for (let j = 0; j < Board.COLUMNS; j++) {\r\n        let tempRight = 0, tempBottom = 0, tempBottomRight = 0, tempTopRight = 0;\r\n        for (let k = 0; k <= 3; k++) {\r\n          // from (i,j) to right\r\n          if (j + k < Board.COLUMNS) {\r\n            tempRight += this.getBoardPieceValue(state[i][j + k]);\r\n          }\r\n\r\n          // from (i,j) to bottom\r\n          if (i + k < Board.ROWS) {\r\n            tempBottom += this.getBoardPieceValue(state[i + k][j]);\r\n          }\r\n\r\n          // from (i,j) to bottom-right\r\n          if (i + k < Board.ROWS && j + k < Board.COLUMNS) {\r\n            tempBottomRight += this.getBoardPieceValue(state[i + k][j + k]);\r\n          }\r\n\r\n          // from (i,j) to top-right\r\n          if (i - k >= 0 && j + k < 7) {\r\n            tempTopRight += this.getBoardPieceValue(state[i - k][j + k]);\r\n          }\r\n        }\r\n        chainValue += tempRight * tempRight * tempRight;\r\n        chainValue += tempBottom * tempBottom * tempBottom;\r\n        chainValue += tempBottomRight * tempBottomRight * tempBottomRight;\r\n        chainValue += tempTopRight * tempTopRight * tempTopRight;\r\n\r\n        if (Math.abs(tempRight) === 4) {\r\n          winnerBoardPiece = tempRight > 0 ? this.boardPiece : this.enemyBoardPiece;\r\n        } else if (Math.abs(tempBottom) === 4) {\r\n          winnerBoardPiece = tempBottom > 0 ? this.boardPiece : this.enemyBoardPiece;\r\n        } else if (Math.abs(tempBottomRight) === 4) {\r\n          winnerBoardPiece = tempBottomRight > 0 ? this.boardPiece : this.enemyBoardPiece;\r\n        } else if (Math.abs(tempTopRight) === 4) {\r\n          winnerBoardPiece = tempTopRight > 0 ? this.boardPiece : this.enemyBoardPiece;\r\n        }\r\n\r\n      }\r\n    }\r\n    return {\r\n      winnerBoardPiece: winnerBoardPiece,\r\n      chain: chainValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return transformed value, so the AI could take a \"lower hanging fruit\",\r\n   *          i.e. a reward in closer future worth more than the same reward in distant future\r\n   * @param returnValue \r\n   * @param winnerBoardPiece \r\n   * @param depth \r\n   */\r\n  private transformValues(returnValue: number, winnerBoardPiece: BoardPiece, depth: number): number {\r\n    const isWon = winnerBoardPiece === this.boardPiece\r\n    const isLost = winnerBoardPiece === this.enemyBoardPiece\r\n\r\n    // value is slightly higher than BIG_NEGATIVE_NUMBER & lower than BIG_POSITIVE_NUMBER\r\n    // so that minState(...) and maxState(...) could \"catch\"\" this value and AI take this move\r\n    // This is just my hypothesis, I haven't tested without it yet.\r\n    // My point is that this AI implementation is basically a heuristic function :P\r\n    if (isWon) {\r\n      returnValue = Utils.BIG_POSITIVE_NUMBER - 100;\r\n    } else if (isLost) {\r\n      returnValue = Utils.BIG_NEGATIVE_NUMBER + 100;\r\n    }\r\n    returnValue -= depth * depth;\r\n    return returnValue\r\n  }\r\n  private getMove(state: Array<Array<number>>, depth: number, alpha: number, beta: number): {\r\n    value: number,\r\n    move: number\r\n  } {\r\n    const stateValue = this.getStateValue(state)\r\n    const isWon = stateValue.winnerBoardPiece === this.boardPiece\r\n    const isLost = stateValue.winnerBoardPiece === this.enemyBoardPiece\r\n\r\n    if (depth >= PlayerAi.MAX_DEPTH || isWon || isLost) {\r\n      return {\r\n        value: this.transformValues(stateValue.chain * this.ownBoardPieceValue, stateValue.winnerBoardPiece, depth),\r\n        move: -1 // leaf node\r\n      }\r\n    }\r\n\r\n    return (depth % 2 === 0)\r\n      ? this.minState(state, depth + 1, alpha, beta) // next is enemy's turn\r\n      : this.maxState(state, depth + 1, alpha, beta) // next is my turn\r\n  }\r\n\r\n  private maxState(state: Array<Array<number>>, depth: number, alpha: number, beta: number): {\r\n    value: number,\r\n    move: number\r\n  } {\r\n    let value = Utils.BIG_NEGATIVE_NUMBER;\r\n    let moveQueue: Array<number> = [];\r\n    for (let column = 0; column < Board.COLUMNS; column++) {\r\n      const { success: actionSuccessful, map: nextState } = Utils.getMockPlayerAction(state, this.boardPiece, column);\r\n      if (actionSuccessful) {\r\n        const { value: nextValue, move: nextMove } = this.getMove(nextState, depth, alpha, beta);\r\n        if (nextValue > value) {\r\n          value = nextValue\r\n          moveQueue = [column]\r\n        } else if (nextValue === value) {\r\n          moveQueue.push(column)\r\n        }\r\n\r\n        // alpha-beta pruning\r\n        if (value > beta) {\r\n          return {\r\n            value: value,\r\n            move: Utils.choose(moveQueue)\r\n          };\r\n        }\r\n        alpha = Math.max(alpha, value);\r\n      }\r\n    }\r\n\r\n    return {\r\n      value: value,\r\n      move: Utils.choose(moveQueue)\r\n    }\r\n  }\r\n  private minState(state: Array<Array<number>>, depth: number, alpha: number, beta: number): {\r\n    value: number,\r\n    move: number\r\n  } {\r\n    let value = Utils.BIG_POSITIVE_NUMBER;\r\n    let moveQueue: Array<number> = [];\r\n    for (let column = 0; column < Board.COLUMNS; column++) {\r\n      const { success: actionSuccessful, map: nextState } = Utils.getMockPlayerAction(state, this.enemyBoardPiece, column);\r\n      if (actionSuccessful) {\r\n        const { value: nextValue, move: nextMove } = this.getMove(nextState, depth, alpha, beta);\r\n        if (nextValue < value) {\r\n          value = nextValue\r\n          moveQueue = [column]\r\n        } else if (nextValue === value) {\r\n          moveQueue.push(column)\r\n        }\r\n\r\n        // alpha-beta pruning\r\n        if (value < alpha) {\r\n          return {\r\n            value: value,\r\n            move: Utils.choose(moveQueue)\r\n          };\r\n        }\r\n        beta = Math.min(beta, value);\r\n      }\r\n    }\r\n    return {\r\n      value: value,\r\n      move: Utils.choose(moveQueue)\r\n    }\r\n  }\r\n\r\n  async getAction(board: Board): Promise<number> {\r\n    const state = Utils.clone(board.map)\r\n    const action = this.maxState(state, 0, Utils.BIG_NEGATIVE_NUMBER, Utils.BIG_POSITIVE_NUMBER);\r\n    console.log(`AI ${this.boardPiece} choose column ${action.move} with value of ${action.value}`)\r\n    return action.move;\r\n  }\r\n}\r\n"]}